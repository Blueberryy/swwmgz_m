// Powerups go here
Class GrilledCheeseSandwich : Inventory
{
	Mixin SWWMAutoUseFix;

	override Inventory CreateCopy( Actor other )
	{
		// additional lore
		SWWMLoreLibrary.Add(other.player,"GCSandwich");
		return Super.CreateCopy(other);
	}
	private void DoTheThing()
	{
		SWWMHandler.DoFlash(Owner,Color(64,255,255,64),10);
		Owner.A_QuakeEx(9,9,9,3,0,1,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:1.);
		Owner.A_StartSound(UseSound,CHAN_ITEMEXTRA);
		Owner.GiveBody(1000,1000);
		let n = Owner.FindInventory("ArmorNugget");
		if ( !n ) Owner.GiveInventory("ArmorNugget",GetDefaultByType("ArmorNugget").MaxAmount);
		else n.Amount = n.MaxAmount;
		let b = Owner.FindInventory("BlastSuit");
		if ( !b ) Owner.GiveInventory("BlastSuit",GetDefaultByType("BlastSuit").MaxAmount);
		else b.Amount = b.MaxAmount;
		let w = Owner.FindInventory("WarArmor");
		if ( !w ) Owner.GiveInventory("WarArmor",GetDefaultByType("WarArmor").MaxAmount);
		else w.Amount = w.MaxAmount;
		SWWMLoreLibrary.Add(Owner.player,"Nugget");
		SWWMLoreLibrary.Add(Owner.player,"BlastSuit");
		SWWMLoreLibrary.Add(Owner.player,"WarArmor");
	}
	override bool Use( bool pickup )
	{
		if ( pickup && !deathmatch ) return false;
		if ( Owner.Health >= 1000 ) return false;
		DoTheThing();
		return true;
	}
	override void ModifyDamage( int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags )
	{
		if ( passive && (Owner.Health-damage <= 0) && (Amount > 0) )
		{
			newdamage = 0;
			DoTheThing();
			Amount--;
		}
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if ( Amount <= 0 ) DepleteOrDestroy();
	}

	Default
	{
		Tag "$T_SANDWICH";
		Stamina 80000;
		Inventory.Icon "graphics/HUD/Icons/I_Sandwich.png";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.UseSound "powerup/sandwich";
		Inventory.PickupMessage "$T_SANDWICH";
		Inventory.MaxAmount 5;
		Inventory.InterHubAmount 5;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.INVBAR;
		+COUNTITEM;
		+INVENTORY.BIGPOWERUP;
		+FLOATBOB;
		FloatBobStrength 0.25;
	}

	States
	{
	Spawn:
		XZW1 A -1;
		Stop;
	}
}

Class GhostSnd : Actor
{
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target || !master )
		{
			Destroy();
			return;
		}
		SetOrigin(target.pos,true);
		if ( players[consoleplayer].Camera == target )
		{
			A_SoundVolume(CHAN_VOICE,0.);
			A_SoundVolume(CHAN_7,.4);
		}
		else
		{
			A_SoundVolume(CHAN_VOICE,.1);
			A_SoundVolume(CHAN_7,0.);
		}
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_StartSound("powerup/ghostact",CHAN_VOICE,CHANF_LOOPING,.1,1.5);
		A_StartSound("powerup/ghostact",CHAN_7,CHANF_LOOPING,.4,ATTN_NONE);
	}
	override void OnDestroy()
	{
		Super.OnDestroy();
		A_StopSound(CHAN_VOICE);
		A_StopSound(CHAN_7);
	}
}

Class GhostPower : PowerInvisibility
{
	Actor snd;

	Default
	{
		Inventory.Icon "graphics/HUD/Icons/I_Ghost.png";
		Powerup.Duration -60;
		Powerup.Strength 100;
		Powerup.Mode "Translucent";
		Powerup.Color "F0E0FF", 0.1;
	}

	override void InitEffect()
	{
		Super.InitEffect();
		if ( !Owner ) return;
		DoEffect();
	}
	override void EndEffect()
	{
		Super.EndEffect();
		if ( !Owner ) return;
		Owner.bNOTARGET = false;
		Owner.A_StartSound("powerup/ghostend",CHAN_ITEMEXTRA);
		if ( (EffectTics <= 0) && Owner && Owner.CheckLocalView() ) Console.Printf(StringTable.Localize("$D_GHOSTARTI"));
	}

	override void DoEffect()
	{
		Super.DoEffect();
		if ( !Owner ) return;
		Owner.bNOTARGET = true;
		if ( !snd ) snd = Spawn("GhostSnd",Owner.pos);
		snd.target = Owner;
		snd.master = self;
	}

	override void AlterWeaponSprite( VisStyle vis, in out int changed )
	{
		// leave weapons alone
		vis.RenderStyle = STYLE_Normal;
		vis.Alpha = 1.f;
		changed = 1;
	}
}

Class GhostArtifactX : Actor
{
	Default
	{
		RenderStyle "Add";
		+NOGRAVITY;
		+NOCLIP;
		+DONTSPLASH;
		Radius 0.1;
		Height 0;
		+FLOATBOB;
		FloatBobStrength 0.25;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target )
		{
			Destroy();
			return;
		}
		Warp(target,flags:WARPF_COPYINTERPOLATION|WARPF_NOCHECKPOSITION);
		bInvisible = target.bInvisible||!target.InStateSequence(target.CurState,target.FindState("Spawn"));
	}
	States
	{
	Spawn:
		XZW1 A -1 Bright;
		Stop;
	}
}

Class GhostArtifact : Inventory
{
	Mixin SWWMAutoUseFix;

	Default
	{
		Tag "$T_GHOSTARTI";
		Stamina 20000;
		Inventory.Icon "graphics/HUD/Icons/I_Ghost.png";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.UseSound "powerup/ghost";
		Inventory.PickupMessage "$T_GHOSTARTI";
		Inventory.MaxAmount 5;
		Inventory.InterHubAmount 5;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.INVBAR;
		+COUNTITEM;
		+INVENTORY.BIGPOWERUP;
		+FLOATBOB;
		FloatBobStrength 0.25;
	}

	override bool Use( bool pickup )
	{
		if ( pickup && !deathmatch ) return false;
		Owner.A_StartSound(UseSound,CHAN_ITEMEXTRA);
		let g = GhostPower(Owner.FindInventory("GhostPower"));
		if ( g ) g.EffectTics = g.default.EffectTics;
		else Owner.GiveInventory("GhostPower",1);
		return true;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		tracer = Spawn("GhostArtifactX",pos);
		tracer.angle = angle;
		tracer.target = self;
		tracer.FloatBobPhase = FloatBobPhase;
	}

	States
	{
	Spawn:
		XZW1 A -1;
		Stop;
	}
}

Class GravSnd : Actor
{
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target || !master )
		{
			Destroy();
			return;
		}
		SetOrigin(target.pos,true);
		if ( players[consoleplayer].Camera == target )
		{
			A_SoundVolume(CHAN_VOICE,0.);
			A_SoundVolume(CHAN_7,.7);
		}
		else
		{
			A_SoundVolume(CHAN_VOICE,.2);
			A_SoundVolume(CHAN_7,0.);
		}
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_StartSound("powerup/gravityact",CHAN_VOICE,CHANF_LOOPING,.2,1.5);
		A_StartSound("powerup/gravityact",CHAN_7,CHANF_LOOPING,.7,ATTN_NONE);
	}
	override void OnDestroy()
	{
		Super.OnDestroy();
		A_StopSound(CHAN_VOICE);
		A_StopSound(CHAN_7);
	}
}

Class GravityPower : Powerup
{
	Actor snd;

	Default
	{
		Inventory.Icon "graphics/HUD/Icons/I_Gravity.png";
		Powerup.Duration -60;
	}

	override void InitEffect()
	{
		Super.InitEffect();
		if ( !Owner ) return;
		DoEffect();
		if ( Owner.pos.z <= Owner.floorz )
			Owner.vel.z = 1;
	}
	override void EndEffect()
	{
		Super.EndEffect();
		if ( !Owner ) return;
		if ( !Owner.bFLYCHEAT )
		{
			Owner.bFLY = false;
			Owner.bNOGRAVITY = false;
			if ( Owner.pos.z > Owner.floorz ) Owner.player.centering = true;
		}
		Owner.A_StartSound("powerup/gravityend",CHAN_ITEMEXTRA);
		if ( (EffectTics <= 0) && Owner && Owner.CheckLocalView() ) Console.Printf(StringTable.Localize("$D_GRAVITYS"));
	}

	override void DoEffect()
	{
		Super.DoEffect();
		if ( !Owner ) return;
		Owner.bFLY = true;
		Owner.bNOGRAVITY = true;
		if ( !snd ) snd = Spawn("GravSnd",Owner.pos);
		snd.target = Owner;
		snd.master = self;
	}

}

Class GravitySuppressor : Inventory
{
	Mixin SWWMAutoUseFix;

	override bool Use( bool pickup )
	{
		if ( pickup && !deathmatch ) return false;
		Owner.A_StartSound(UseSound,CHAN_ITEMEXTRA);
		let g = GravityPower(Owner.FindInventory("GravityPower"));
		if ( g ) g.EffectTics = g.default.EffectTics;
		else Owner.GiveInventory("GravityPower",1);
		return true;
	}
	Default
	{
		Tag "$T_GRAVITYS";
		Stamina 16000;
		Inventory.Icon "graphics/HUD/Icons/I_Gravity.png";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.UseSound "powerup/gravity";
		Inventory.PickupMessage "$T_GRAVITYS";
		Inventory.MaxAmount 5;
		Inventory.InterHubAmount 5;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.INVBAR;
		+COUNTITEM;
		+INVENTORY.BIGPOWERUP;
		+FLOATBOB;
		FloatBobStrength 0.25;
	}
	States
	{
	Spawn:
		XZW1 A -1;
		Stop;
	}
}

Class InvinciballLight : PointLightAttenuated
{
	Default
	{
		Args 192,64,0,80;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target || !master )
		{
			Destroy();
			return;
		}
		if ( target.player )
			SetOrigin(target.Vec2OffsetZ(0,0,target.player.viewz),true);
		else SetOrigin(target.Vec3Offset(0,0,target.height/2),true);
		args[LIGHT_INTENSITY] = Random[Invinciball](10,12)*8;
		bDORMANT = Powerup(master).isBlinking();
	}
}

Class InvinciballPower : Powerup
{
	Actor l;
	int lasteffect;

	Default
	{
		Powerup.Duration -30;
		Inventory.Icon "graphics/HUD/Icons/I_Invinciball.png";
		Powerup.Color "FF3000", 0.1;
	}

	override void InitEffect()
	{
		Super.InitEffect();
		if ( !Owner ) return;
		lasteffect = int.min;
		l = Spawn("InvinciballLight",Owner.pos);
		l.target = Owner;
		l.master = self;
	}

	override void EndEffect()
	{
		Super.EndEffect();
		if ( !Owner ) return;
		Owner.A_StartSound("powerup/invinciballend",CHAN_ITEMEXTRA);
		if ( (EffectTics <= 0) && Owner && Owner.CheckLocalView() ) Console.Printf(StringTable.Localize("$D_INVINCIBALL"));
	}

	override void ModifyDamage( int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags )
	{
		if ( (damage > 0) && passive )
		{
			if ( damageType == 'Ynykron' )
			{
				newdamage = damage;
				return;
			}
			newdamage = 0;
			if ( level.maptime > lasteffect+5 )
			{
				SWWMHandler.DoFlash(Owner,Color(64,255,64,0),15);
				Owner.A_StartSound("powerup/invinciballhit",CHAN_POWERUP);
				lasteffect = level.maptime;
			}
		}
	}
}

Class FuckingInvinciball : Inventory
{
	Mixin SWWMAutoUseFix;

	override Inventory CreateCopy( Actor other )
	{
		// additional lore
		SWWMLoreLibrary.Add(other.player,"Invinciball");
		return Super.CreateCopy(other);
	}
	override bool Use( bool pickup )
	{
		if ( pickup && !deathmatch ) return false;
		Owner.A_StartSound(UseSound,CHAN_ITEMEXTRA);
		Owner.A_StartSound("misc/sundowner",CHAN_POWERUPEXTRA);
		let i = InvinciballPower(Owner.FindInventory("InvinciballPower"));
		if ( i ) i.EffectTics = i.default.EffectTics;
		else Owner.GiveInventory("InvinciballPower",1);
		return true;
	}
	Default
	{
		Tag "$T_INVINCIBALL";
		Stamina 150000;
		Inventory.Icon "graphics/HUD/Icons/I_Invinciball.png";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.UseSound "powerup/invinciball";
		Inventory.PickupMessage "$T_INVINCIBALL";
		Inventory.MaxAmount 5;
		Inventory.InterHubAmount 5;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.INVBAR;
		+COUNTITEM;
		+INVENTORY.BIGPOWERUP;
		+FLOATBOB;
		FloatBobStrength 0.25;
	}
	States
	{
	Spawn:
		XZW1 A -1;
		Stop;
	}
}

Class RagekitLight : PointLightAttenuated
{
	Default
	{
		Args 255,0,0,80;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target || !master )
		{
			Destroy();
			return;
		}
		if ( target.player )
			SetOrigin(target.Vec2OffsetZ(0,0,target.player.viewz),true);
		else SetOrigin(target.Vec3Offset(0,0,target.height/2),true);
		args[LIGHT_INTENSITY] = Random[Invinciball](10,12)*8;
		bDORMANT = Powerup(master).isBlinking();
	}
}

Class RageSnd : Actor
{
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target || !master )
		{
			Destroy();
			return;
		}
		SetOrigin(target.pos,true);
		if ( players[consoleplayer].Camera == target )
		{
			A_SoundVolume(CHAN_VOICE,0.);
			A_SoundVolume(CHAN_7,.5);
		}
		else
		{
			A_SoundVolume(CHAN_VOICE,.4);
			A_SoundVolume(CHAN_7,0.);
		}
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_StartSound("powerup/ragekitact",CHAN_VOICE,CHANF_LOOPING,.4,1.5);
		A_StartSound("powerup/ragekitact",CHAN_7,CHANF_LOOPING,.5,ATTN_NONE);
	}
	override void OnDestroy()
	{
		Super.OnDestroy();
		A_StopSound(CHAN_VOICE);
		A_StopSound(CHAN_7);
	}
}

Class RagekitPower : Powerup
{
	Actor l, snd;
	int lasteffect, lastrage;

	override double GetSpeedFactor()
	{
		return 2.;
	}

	Default
	{
		Powerup.Duration -30;
		Inventory.Icon "graphics/HUD/Icons/I_Ragekit.png";
		Powerup.Color "FF0000", 0.2;
	}

	override void InitEffect()
	{
		Super.InitEffect();
		if ( !Owner ) return;
		if ( Owner.player == players[consoleplayer] )
			lastrage = SWWMHandler.AddOneliner("ragekit",20);
		SWWMHandler.DoFlash(Owner,Color(64,255,0,0),30);
		Owner.A_QuakeEx(8,8,8,20,0,1,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:1.);
		lasteffect = int.min;
		l = Spawn("RagekitLight",Owner.pos);
		l.target = Owner;
		l.master = self;
	}

	override void DoEffect()
	{
		Super.DoEffect();
		if ( !Owner ) return;
		if ( !snd ) snd = Spawn("RageSnd",Owner.pos);
		snd.target = Owner;
		snd.master = self;
		if ( !(level.maptime%30) )
		{
			SWWMHandler.DoFlash(Owner,Color(16,255,0,0),5);
			if ( (Owner.player == players[consoleplayer]) && (gametic > lastrage) )
				lastrage = SWWMHandler.AddOneliner("ragekit",5);
			Owner.A_QuakeEx(2,2,2,Random[Rage](1,2),0,1,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:.5);
		}
	}

	override void EndEffect()
	{
		Super.EndEffect();
		if ( !Owner ) return;
		Owner.A_StartSound("powerup/ragekitend",CHAN_ITEMEXTRA);
		if ( (EffectTics <= 0) && Owner && Owner.CheckLocalView() ) Console.Printf(StringTable.Localize("$D_RAGEKIT"));
	}

	override void ModifyDamage( int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags )
	{
		if ( !passive && ((damageType == 'Melee') || (damageType == 'Dash') || (damageType == 'GroundPound')) )
		{
			newdamage = damage*8;
			if ( level.maptime > lasteffect+5 )
			{
				SWWMHandler.DoFlash(Owner,Color(64,255,0,0),10);
				Owner.A_QuakeEx(8,8,8,Random[Rage](3,8),0,1,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:1.);
				if ( (Owner.player == players[consoleplayer]) && (gametic > lastrage) )
					lastrage = SWWMHandler.AddOneliner("ragekit",5);
				Owner.A_StartSound("powerup/ragekithit",CHAN_POWERUP);
				lasteffect = level.maptime;
			}
		}
		else if ( passive )
			newdamage = damage/4;
	}
}

Class Ragekit : Inventory
{
	Mixin SWWMAutoUseFix;

	override bool Use( bool pickup )
	{
		if ( pickup && !deathmatch ) return false;
		Owner.A_StartSound(UseSound,CHAN_ITEMEXTRA);
		let r = RagekitPower(Owner.FindInventory("RagekitPower"));
		if ( r ) r.EffectTics = r.default.EffectTics;
		else Owner.GiveInventory("RagekitPower",1);
		return true;
	}
	Default
	{
		Tag "$T_RAGEKIT";
		Stamina 120000;
		Inventory.Icon "graphics/HUD/Icons/I_Ragekit.png";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.UseSound "powerup/ragekit";
		Inventory.PickupMessage "$T_RAGEKIT";
		Inventory.MaxAmount 5;
		Inventory.InterHubAmount 5;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.INVBAR;
		+COUNTITEM;
		+INVENTORY.BIGPOWERUP;
		+FLOATBOB;
		FloatBobStrength 0.25;
	}
	States
	{
	Spawn:
		XZW1 A -1;
		Stop;
	}
}

Class Omnisight : Inventory
{
	override bool Use( bool pickup )
	{
		level.allmap = true;
		// not used up, must be kept for the targetting features to work
		return false;
	}
	Default
	{
		Tag "$T_OMNISIGHT";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "$I_OMNISIGHT";
		Inventory.MaxAmount 1;
		Inventory.InterHubAmount 0;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.AUTOACTIVATE;
		+COUNTITEM;
		+INVENTORY.BIGPOWERUP;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+FLOATBOB;
		FloatBobStrength 0.25;
	}
	States
	{
	Spawn:
		XZW1 A -1;
		Stop;
	}
}

Class LampMoth : Actor
{
}

Class LampMoth2 : LampMoth
{
}

Class LampMashiro : Actor abstract
{
//
// ~nothing here yet, but she will make an appearance someday~
//
// ⠀⠀⠀⠀⠤⠀⠄⠀⠀⠀⠳⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡣⣁⢌⡀⢄⠁⡁⠝⢿⣿⣿⣿⡻⣿⣿⣷⣦
// ⠀⠀⠠⠀⠠⠀⠀⡀⠘⣠⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣊⢇⠠⢐⢄⡙⢿⣿⣿⣾⠫⣻⣿
// ⠀⡄⠂⢴⠠⠌⠰⢇⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀⠣⡣⡱⣌⠻⣿⣿⣿⣿⣿
// ⠀⠁⠛⠂⠀⠉⡍⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠘⣮⣾⡮⢦⡹⣿⣿⣿⣿
// ⠄⠠⠉⢼⡇⠶⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⢿⣿⣿⡦⢣⡉⢝⢝⢽
// ⠀⠀⠚⠃⠀⠀⡀⠀⠀⠀⠀⣠⣿⣿⣿⣿⣿⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢸⣿⣿⣿⢀⢃⠀⡁⠑
// ⠰⠀⠂⠁⠀⠀⡆⠀⠀⠀⣴⣿⣿⣿⣿⣿⠋⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡈⣿⣿⣿⣇⠆⢃⠈⡇
// ⠀⠀⠀⢠⠄⣠⣇⠀⢀⣾⣿⣿⣿⣿⣿⡃⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣿⣿⣿⣿⢔⢌⢆⢑
// ⠀⠀⠀⢀⣶⣿⣷⢀⣾⣿⣿⣿⣿⡯⡊⠀⢸⡏⣟⣻⣽⣭⣽⣛⡛⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡯⡇⣿⣿⣿⣿⣗⢕⢕⠄
// ⠀⢠⣶⣿⣿⢿⢃⣾⣿⣿⣿⣿⡫⡪⠀⠀⢸⡇⣿⣿⣿⣿⣿⣿⣿⣦⡘⠄⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡯⡇⣿⣿⣿⣿⣗⢔⢕⢅
// ⠀⣺⣿⡉⠕⠁⣼⣿⣿⣿⡿⡫⡪⠂⠀⢔⢸⢀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣶⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣪⠃⣿⣿⣿⣿⡟⢄⣡⣵
// ⡛⠟⢋⠀⠀⢸⣿⣿⣿⣿⢠⢫⡊⠀⡔⢵⡈⢠⢣⡹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠡⠚⠓⠪⠉⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡫⡎⣸⣿⣿⣿⡟⢠⢃⣂⡿
// ⡃⡊⢃⡔⡠⣿⣿⣿⣿⡇⣜⡘⢀⢜⡀⡅⡆⠘⢐⠁⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢾⠿⢿⣿⣿⣿⣿⣷⣾⣽⡻⢿⣿⣿⣿⣿⣿⣿⣿⡿⣛⣿⣿⣟⡜⠠⣻⣿⣿⡟⠴⠃⠉⠁⠀
// ⡺⢠⡾⣸⡷⣿⣿⣿⣿⠂⣓⠂⡎⡺⠪⠒⠃⠀⠀⠀⠀⠀⠙⠿⣯⢻⣿⣿⣿⡟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣵⣾⣿⡷⣲⣿⣿⣿⣿⣿⣿⣿⣷⣝⢿⣿⣿⣿⡿⡫⡺⣽⣿⣿⡗⠀⢸⣿⣿⠏⠀⠀⠀⠀⠀⠀
// ⣴⣿⢣⣿⢳⣿⣿⣿⡿⡨⡊⠠⡪⡢⠂⠀⠀⠀⠀⠀⢀⣀⠀⠀⠘⢧⡻⣿⣿⡇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣵⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢳⣝⠿⡫⡪⣪⡮⣾⣿⡟⢠⠅⣿⠟⠋⠀⠀⠀⠀⠀⠀⠀
// ⣿⡏⣾⢣⡾⣿⣿⣿⡇⢪⠂⡨⡠⠀⠀⠀⠀⢀⡴⠋⠉⠈⠉⢦⡀⠠⢅⠹⣿⢰⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢟⣫⣾⡿⣫⣦⠸⢊⡄⣼⣿⡟⢠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⡿⢸⣏⣾⣇⣿⣿⣿⡇⢵⢀⢓⠀⠀⠀⠀⠀⡮⠀⠀⠀⠀⠀⠈⣇⠀⠧⡗⡈⢿⣺⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⣯⣾⣿⡿⠛⠊⣬⠴⢪⠋⣼⣿⠟⢔⢝⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠃⡿⣸⣿⣿⢸⣿⣿⡇⡊⢰⢱⢂⡀⠀⠀⠀⢳⠀⠀⠀⠀⠀⢰⡇⠀⣸⢐⡈⢄⢿⠿⠿⢿⡿⠽⢫⣵⣿⡿⠿⠛⠛⠙⠉⠁⠀⠞⠙⠃⠍⡁⠖⡪⡫⡪⣻⢁⣾⡿⢃⢞⢕⡝⢰⣆⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⢸⢣⣿⣿⡗⡈⢿⣿⡇⠀⢸⣿⣷⣵⣄⠀⠀⠈⠲⣠⣠⣠⡴⠋⠀⠀⢒⢔⢂⢀⢎⢇⣓⡕⠂⡚⡩⢡⢰⢂⣓⡣⣢⠒⠀⠀⠀⠀⠀⠀⠀⠈⠢⡈⡲⡑⢡⣾⠟⡠⡣⣂⢇⠃⣿⣿⣷⣦⡀⠀⠀⠀⠀⠀⠀⠀
// ⡟⣾⣿⡿⣸⢸⡘⣿⣷⠀⢸⣿⣿⣿⣿⣿⣦⣄⣀⣀⣀⣀⣀⣠⣤⣜⢔⢕⢕⢔⢕⢕⣗⣇⣳⡪⣺⢐⢱⢑⢒⠖⠁⠀⠀⢀⠄⠔⠖⢦⣀⠀⠀⠰⠌⣴⠟⡡⡪⡪⡪⡜⡜⣸⣿⣿⣿⣿⡿⡢⠀⠀⠀⠀⠀⠀
// ⢱⣿⣿⡣⢑⠔⡕⠘⣿⡀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣷⣷⣵⣕⣥⣣⣣⡣⡪⣐⢱⢠⡃⠀⠀⠀⣴⠁⠀⠀⠀⠀⠸⣆⠀⠀⠘⠀⡪⡪⡪⡪⡪⣸⢡⣿⣿⣿⣿⣿⡯⣺⡀⢤⡀⠀⠀⠀
// ⣿⣿⣟⣝⣝⣺⠁⠀⠘⣧⢘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣷⣇⣣⠣⡘⡀⠀⠀⠀⡟⠀⠀⠀⠀⠀⠨⡗⠀⠀⠀⠈⢮⠺⡪⢊⢫⠃⣾⣿⣿⣿⣿⣿⡪⡏⣦⡀⢹⣷⣤⣀
// ⣿⣿⢑⢇⢆⠆⠀⠀⣸⣎⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⣧⣀⠀⠀⢻⡀⠀⠀⠀⢀⡼⠃⠀⠀⠀⠀⠸⢘⢜⡐⡕⣸⣿⣿⣿⣿⣿⣃⣟⣱⣿⣿⣧⢻⣿⣿
// ⣿⣟⢕⢕⢼⠀⠀⠀⣿⣿⣧⡹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢡⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠉⠓⠒⠓⠋⠀⠀⠀⠀⠀⠠⠀⠱⡱⡨⢣⣿⣿⣿⣿⣿⢗⡯⣱⣿⣿⣿⢇⣄⠃⠙
// ⣿⡒⡢⡢⡃⠀⠀⠀⣿⣿⣿⣷⣝⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⣄⣀⣀⣀⣀⢀⣀⡀⡠⣀⡢⡪⠂⣽⣿⣿⣿⣿⣟⡕⣺⣿⣿⣿⣏⣿⣷⢔⡄
// ⡿⡸⢰⢔⠂⠀⠀⠀⢿⣿⣿⣿⣿⣯⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣯⢮⡊⡠⣰⣿⣿⣿⣿⡿⣡⣿⣿⣿⣿⡟⣾⣿⣿⢵⠅
// ⣟⢕⢝⣗⠀⠀⠀⡹⡘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣫⡾⢱⣿⣿⣿⣿⡟⣼⣿⣿⣿⣿⡿⣹⣿⣿⡟⡹⢰
// ⢕⢕⢕⢕⠠⡢⣪⢂⢇⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣫⣾⣿⢣⣿⣿⣿⣿⣿⣻⣿⣿⣿⣿⡿⣱⣿⣿⣿⡫⡇⣼
// ⢕⢕⢕⠅⣘⡪⡚⡔⠍⠂⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣫⣾⣿⢟⢁⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢣⣿⣿⣿⣏⡼⢠⣿
// ⢕⢕⢕⠀⣖⡪⡪⣂⠀⠐⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢟⣫⣵⡿⢟⣫⡴⢁⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⣸⣿⣿⣿⢒⠇⣼⣿
// ⢕⢅⢕⠨⣃⢪⢨⢂⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣄⣳⢰⢬⡙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣍⣛⠻⠿⠿⠿⢛⣯⡭⠶⣞⣛⣭⣵⣾⣿⠿⢁⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⢀⣿⣿⣿⡯⡝⢰⣿⣿
// ⢝⢕⠇⢸⠱⡑⡁⠀⣀⠀⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣷⣬⣃⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⡿⡱⢃⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⣼⣿⣿⣿⣸⢡⣿⣿⣿
// ⢕⢕⠅⢜⠕⡠⣢⣾⣿⣷⣤⣄⢀⣬⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢛⠴⢡⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⢠⣿⣿⣿⢝⢡⣿⣿⣿⣿
// ⢕⢕⠅⣕⢥⡶⢀⠻⣿⣿⣿⣟⢿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢫⡐⣕⢡⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⢀⣿⣿⣿⠏⢁⣿⣿⣿⣿⣿
// ⢕⢕⢠⢗⣛⣓⣁⢱⣾⣿⣿⣿⣷⣷⣽⣿⡻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢛⢔⠕⠓⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⢀⣾⣿⡿⡣⢎⣿⣿⣿⣿⣿⣿
// ⡕⡕⠠⡅⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡝⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠐⣁⡴⡴⢣⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⠀⢠⣾⠿⣫⠞⣱⣿⣿⣿⣿⣿⠟⡡
// ⢅⢇⢘⢕⢍⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣎⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠛⠛⠛⠉⠁⠀⢀⢜⢕⢅⠕⣡⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠐⡫⡠⠜⣡⣾⣿⣿⡿⠟⠫⠦⠪⠊
// ⢕⢕⢸⣵⣷⣾⣿⣿⣿⣿⣟⢿⣿⣿⣿⣿⣿⣿⣿⣦⣤⡩⣉⣉⡩⣉⣉⠉⠉⠈⠀⠀⠀⠀⠀⠀⠀⢀⣀⡀⠀⠀⣤⢔⢗⢕⠕⣰⣿⣿⣿⣿⣿⣿⣿⣿⡿⢋⢔⢕⠕⣓⠏⣊⠰⠻⠟⠛⣉⠅⢄⠂⡪⡪⡪⠨
//
}

Class CompanionLamp : Actor
{
	Vector3 Trail;
	Array<LampMoth> moff;

	Default
	{
		+NOGRAVITY;
		+NOCLIP;
		+SHOOTABLE;
		+NODAMAGE;
		+NOBLOOD;
		+DONTSPLASH;
		+FLOATBOB;
		+INTERPOLATEANGLES;
		Radius 4;
		Height 8;
		FloatBobStrength 0.5;
	}
	action void A_Moth()
	{
		// random chance to spawn moths
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if ( !target || !SWWMLamp(master) )
		{
			Destroy();
			return;
		}
		Trail = pos;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target || !SWWMLamp(master) )
		{
			Destroy();
			return;
		}
		// update trailing position
		bool foundspot = false;
		for ( int i=0; i<180; i++ )
		{
			for ( int j=1; j>=-1; j-=2 )
			{
				double ang = (target.angle-180)+i*j;
				Vector3 testpos = target.Vec3Offset(cos(ang)*32,sin(ang)*32,target.height-8);
				if ( !level.IsPointInLevel(testpos) ) continue;
				Trail = testpos;
				foundspot = true;
			}
			// check at most for a 45 degree offset
			if ( foundspot && (i > 45) ) break;
		}
		angle += Clamp(deltaangle(angle,AngleTo(target)),-5.,5.);
		vel *= .8;
		Vector3 newpos = Trail;
		Vector3 dir = level.Vec3Diff(pos,newpos);
		if ( dir.length() > 0 )
			vel += dir.unit()*min(dir.length()*.05,20.);
		Vector3 diff = pos-target.pos;
		if ( (diff.x > -16) && (diff.x < 16) && (diff.y > -16) && (diff.y < 16) && (diff.z > -16) && (diff.z < target.height+8) )
		{
			if ( diff.x < 0 ) vel.x -= .2;
			else vel.x += .2;
			if ( diff.y < 0 ) vel.y -= .2;
			else vel.y += .2;
			if ( diff.z < 0 ) vel.z -= .2;
			else vel.z += .2;
		}
	}
	States
	{
	Spawn:
		XZW1 A 1 A_JumpIf(SWWMLamp(master)&&SWWMLamp(master).bActive,1);
		Wait;
		XZW1 B 0 A_JumpIf(!SWWMLamp(master)||!SWWMLamp(master).bActive,"Spawn");
		XZW1 B 1 A_Moth();
		Loop;
	}
}

Class SWWMLamp : Inventory
{
	bool bActive;
	TextureID OnIcon;
	Actor thelamp;
	int charge;

	Property Charge : charge;

	override Inventory CreateCopy( Actor other )
	{
		// additional lore
		SWWMLoreLibrary.Add(other.player,"Lamp");
		return Super.CreateCopy(other);
	}
	override bool HandlePickup( Inventory item )
	{
		// add charge
		if ( item.GetClass() == GetClass() )
			Charge = min(default.Charge,Charge+SWWMLamp(item).Charge);
		return Super.HandlePickup(item);
	}
	override bool Use( bool pickup )
	{
		if ( pickup && !deathmatch ) return false;
		bActive = !bActive;
		if ( !OnIcon ) OnIcon = TexMan.CheckForTexture("graphics/HUD/Icons/I_Lamp.png",TexMan.Type_MiscPatch);
		Icon = bActive?OnIcon:default.Icon;
		// don't consume on use
		Amount++;
		return true;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if ( !thelamp )
		{
			thelamp = Spawn("CompanionLamp",Owner.Vec3Offset(cos(Owner.angle-180)*32,sin(Owner.angle-180)*32,Owner.height-8));
			thelamp.target = Owner;
			thelamp.master = self;
		}
		if ( bActive && !(level.maptime%35) ) Charge--;
		if ( Charge <= 0 )
		{
			Amount--;
			if ( Amount <= 0 ) DepleteOrDestroy();
		}
	}
	override void DetachFromOwner()
	{
		Super.DetachFromOwner();
		if ( thelamp ) thelamp.Destroy();
		Icon = default.Icon;
		bActive = false;
	}
	Default
	{
		Tag "$T_LAMP";
		Inventory.Icon "graphics/HUD/Icons/I_LampOff.png";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "$I_LAMP";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.InterHubAmount 1;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.INVBAR;
		+COUNTITEM;
		+INVENTORY.BIGPOWERUP;
		+FLOATBOB;
		FloatBobStrength 0.25;
		SWWMLamp.Charge 100;
	}
	States
	{
	Spawn:
		XZW1 A -1;
		Stop;
	}
}

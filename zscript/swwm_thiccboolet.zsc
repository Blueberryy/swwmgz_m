// Blackmann-Forx Silver Bullet JET (successor to Silver Bullet from Zanaveth Ultra Suite)
// Slot 8, replaces Plasma Rifle, Hellstaff, Quietus (hilt)

Class SilverBulletCasing : SWWMCasing
{
	Default
	{
		BounceSound "silverbullet/casing";
	}
}

Class SilverBulletMag : SWWMCasing
{
	Default
	{
		Mass 10;
		BounceFactor 0.4;
		WallBounceFactor 0.4;
		BounceSound "silverbullet/mag";
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		heat = 0;
	}
	States
	{
	Death:
		#### # -1
		{
			pitch = 0;
			angle = FRandom[Junk](0,360);
			roll = RandomPick[Junk](-90,90);
		}
		Stop;
	}
}
Class SilverBulletMagEmpty : SilverBulletMag
{
}

Class SilverAirRip : Actor
{
	Default
	{
		Radius 0.1;
		Height 0;
		+NOGRAVITY;
		+NOCLIP;
		+DONTSPLASH;
		+NOTELEPORT;
		+FORCERADIUSDMG;
		+NODAMAGETHRUST;
		+NOINTERACTION;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		SWWMHandler.DoExplosion(self,40,2000,40,ignoreme:target);
		Destroy();
	}
}

Class SilverImpact : Actor
{
	Default
	{
		Radius 0.1;
		Height 0;
		+NOGRAVITY;
		+NOCLIP;
		+DONTSPLASH;
		+NOTELEPORT;
		+FORCERADIUSDMG;
		+NODAMAGETHRUST;
		+NOINTERACTION;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		SWWMHandler.DoExplosion(self,100,8000,100,20);
		if ( swwm_extraalert ) A_AlertMonsters(2500);
		A_QuakeEx(4,4,4,20,0,400,"",QF_RELATIVE|QF_SCALEDOWN,falloff:100,rollIntensity:.9);
		if ( special1 )
		{
			Destroy();
			return;
		}
		A_StartSound("silverbullet/hit",CHAN_VOICE,CHANF_DEFAULT,1.,.7);
		A_SprayDecal("BigBulletChip",-64);
		A_SprayDecal("HugeWallCrack",-64);
		int numpt = Random[Silverbullet](15,25);
		Vector3 x = (cos(angle)*cos(pitch),sin(angle)*cos(pitch),-sin(pitch));
		for ( int i=0; i<numpt; i++ )
		{
			Vector3 pvel = (x+(FRandom[Silverbullet](-.4,.4),FRandom[Silverbullet](-.4,.4),FRandom[Silverbullet](-.4,.4))).unit()*FRandom[Silverbullet](.4,2.);
			let s = Spawn("SWWMSmoke",pos);
			s.vel = pvel;
			s.scale *= 1.8;
			s.special1 = Random[Silverbullet](1,3);
			s.SetShade(Color(1,1,1)*Random[Silverbullet](96,192));
		}
		numpt = Random[Silverbullet](6,9);
		for ( int i=0; i<numpt; i++ )
		{
			Vector3 pvel = (FRandom[Silverbullet](-1,1),FRandom[Silverbullet](-1,1),FRandom[Silverbullet](-1,1)).unit()*FRandom[Silverbullet](2,8);
			let s = Spawn("SWWMSpark",pos);
			s.scale *= 1.3;
			s.vel = pvel;
		}
		numpt = Random[Silverbullet](10,15);
		for ( int i=0; i<numpt; i++ )
		{
			Vector3 pvel = (x+(FRandom[Silverbullet](-.6,.6),FRandom[Silverbullet](-.6,.6),FRandom[Silverbullet](-.6,.6))).unit()*FRandom[Silverbullet](6,20);
			let s = Spawn("SWWMChip",pos);
			s.scale *= 1.6;
			s.vel = pvel;
		}
	}
	States
	{
	Spawn:
		TNT1 A 20;
		Stop;
	}
}

Class WallPenetrate
{
	Vector3 hitpos, hitdir, hitnormal;
}

Class AuxiliarySilverBulletTracer : LineTracer
{
	override ETraceStatus TraceCallback()
	{
		if ( Results.HitType == TRACE_HitActor ) return TRACE_Skip;
		else if ( (Results.HitType == TRACE_HitWall) && (Results.Tier == TIER_Middle) )
		{
			if ( !Results.HitLine.sidedef[1] || (Results.HitLine.Flags&(Line.ML_BlockHitscan|Line.ML_BlockEverything)) )
				return TRACE_Stop;
			return TRACE_Skip;
		}
		return TRACE_Stop;
	}
}

Class SilverBulletTracer : SpreadSlugTracer
{
	Array<WallPenetrate> WallPenetrateList;

	override ETraceStatus TraceCallback()
	{
		// liquid splashes
		if ( Results.CrossedWater )
		{
			let hl = new("WaterHit");
			hl.sect = Results.CrossedWater;
			hl.hitpos = Results.CrossedWaterPos;
			WaterHitList.Push(hl);
		}
		else if ( Results.Crossed3DWater )
		{
			let hl = new("WaterHit");
			hl.sect = Results.Crossed3DWater;
			hl.hitpos = Results.Crossed3DWaterPos;
			WaterHitList.Push(hl);
		}
		if ( Results.HitType == TRACE_HitActor )
		{
			if ( Results.HitActor == ignoreme ) return TRACE_Skip;
			if ( Results.HitActor.bSHOOTABLE )
			{
				let ent = new("HitListEntry");
				ent.hitactor = Results.HitActor;
				ent.hitlocation = Results.HitPos;
				ent.x = Results.HitVector;
				if ( (Results.HitActor.Health >= int(penetration)) || Results.HitActor.bNODAMAGE )
				{
					ent.hitdamage = int(penetration);
					penetration = 0;
				}
				else
				{
					ent.hitdamage = min(Results.HitActor.health+int(Results.HitActor.GetSpawnHealth()*gameinfo.gibfactor),int(penetration));
					int killdamage = min(Results.HitActor.health,int(penetration));
					penetration = max(0,penetration-killdamage*.4);
				}
				hitlist.Push(ent);
				if ( penetration <= 0 ) return TRACE_Stop;
				return TRACE_Skip;
			}
			return TRACE_Skip;
		}
		else if ( (Results.HitType == TRACE_HitWall) && (Results.Tier == TIER_Middle) )
		{
			if ( !Results.HitLine.sidedef[1] || (Results.HitLine.Flags&(Line.ML_BlockHitscan|Line.ML_BlockEverything)) )
			{
				for ( int i=1; i<int(penetration/12); i++ )
				{
					Vector3 ofs = level.Vec3Offset(Results.HitPos,Results.HitVector*i);
					if ( level.IsPointInLevel(ofs) )
					{
						penetration = max(0,penetration-i*4);
						let wp = new("WallPenetrate");
						wp.hitpos = Results.HitPos;
						wp.hitdir = Results.HitVector;
						wp.hitnormal = (-Results.HitLine.delta.y,Results.HitLine.delta.x,0).unit();
						if ( !Results.Side ) wp.hitnormal *= -1;
						WallPenetrateList.Push(wp);
						if ( Results.HitLine.sidedef[1] )
							ShootThroughList.Push(Results.HitLine);
						// trace backwards to find exit surface
						let at = new("AuxiliarySilverBulletTracer");
						at.Trace(ofs,level.PointInSector(ofs.xy),-Results.HitVector,2.,TRACE_NoSky);
						if ( at.Results.HitType != TRACE_HitNone )
						{
							let wp2 = new("WallPenetrate");
							wp2.hitpos = at.Results.HitPos;
							wp2.hitdir = at.Results.HitVector;
							if ( at.Results.HitType == TRACE_HitWall )
							{
								wp2.hitnormal = (-at.Results.HitLine.delta.y,at.Results.HitLine.delta.x,0).unit();
								if ( !at.Results.Side ) wp2.hitnormal *= -1;
								if ( at.Results.HitLine.sidedef[1] )
									ShootThroughList.Push(at.Results.HitLine);
							}
							else if ( at.Results.HitType == TRACE_HitCeiling )
								wp2.hitnormal = at.Results.HitSector.ceilingplane.Normal;
							else if ( at.Results.HitType == TRACE_HitFloor )
								wp2.hitnormal = at.Results.HitSector.floorplane.Normal;
							WallPenetrateList.Push(wp2);
						}
						return TRACE_Skip;
					}
				}
				return TRACE_Stop;
			}
			ShootThroughList.Push(Results.HitLine);
			return TRACE_Skip;
		}
		else if ( Results.HitType != TRACE_HitNone )
		{
			for ( int i=1; i<int(penetration/12); i++ )
			{
				Vector3 ofs = level.Vec3Offset(Results.HitPos,Results.HitVector*i);
				if ( level.IsPointInLevel(ofs) )
				{
					penetration = max(0,penetration-i*4);
					let wp = new("WallPenetrate");
					wp.hitpos = Results.HitPos;
					wp.hitdir = Results.HitVector;
					if ( Results.HitType == TRACE_HitWall )
					{
						wp.hitnormal = (-Results.HitLine.delta.y,Results.HitLine.delta.x,0).unit();
						if ( !Results.Side ) wp.hitnormal *= -1;
						ShootThroughList.Push(Results.HitLine);
					}
					else if ( Results.HitType == TRACE_HitCeiling )
						wp.hitnormal = Results.HitSector.ceilingplane.Normal;
					else if ( Results.HitType == TRACE_HitFloor )
						wp.hitnormal = Results.HitSector.floorplane.Normal;
					WallPenetrateList.Push(wp);
					// trace backwards to find exit surface
					let at = new("AuxiliarySilverBulletTracer");
					at.Trace(ofs,level.PointInSector(ofs.xy),-Results.HitVector,2.,TRACE_NoSky);
					if ( at.Results.HitType != TRACE_HitNone )
					{
						let wp2 = new("WallPenetrate");
						wp2.hitpos = at.Results.HitPos;
						wp2.hitdir = at.Results.HitVector;
						if ( at.Results.HitType == TRACE_HitWall )
						{
							wp2.hitnormal = (-at.Results.HitLine.delta.y,at.Results.HitLine.delta.x,0).unit();
							if ( !at.Results.Side ) wp2.hitnormal *= -1;
							if ( at.Results.HitLine.sidedef[1] )
								ShootThroughList.Push(at.Results.HitLine);
						}
						else if ( at.Results.HitType == TRACE_HitCeiling )
							wp2.hitnormal = at.Results.HitSector.ceilingplane.Normal;
						else if ( at.Results.HitType == TRACE_HitFloor )
							wp2.hitnormal = at.Results.HitSector.floorplane.Normal;
						WallPenetrateList.Push(wp2);
					}
					return TRACE_Skip;
				}
			}
		}
		return TRACE_Stop;
	}
}

Class SilverBullet : SWWMWeapon
{
	bool chambered, fired;
	int clipcount;

	transient ui TextureID WeaponBox[2], ZoomBar;
	transient ui Font TewiFont;
	transient ui DynamicValueInterpolator ZoomInter;

	bool zoomed;
	double zoomlevel;
	ui TextureID reticle;
	bool initialized;
	int rezoom;

	State dezoomstate;

	Property ClipCount : clipcount;

	override void DrawWeapon( double TicFrac, double bx, double by, Vector2 hs, Vector2 ss )
	{
		if ( !WeaponBox[0] ) WeaponBox[0] = TexMan.CheckForTexture("graphics/HUD/SilverBulletDisplay.png",TexMan.Type_Any);
		if ( !WeaponBox[1] ) WeaponBox[1] = TexMan.CheckForTexture("graphics/HUD/SilverBulletZoomDisplay.png",TexMan.Type_Any);
		if ( !ZoomBar ) ZoomBar = TexMan.CheckForTexture("graphics/HUD/SilverBulletZoomBar.png",TexMan.Type_Any);
		if ( !TewiFont ) TewiFont = Font.GetFont('TewiShaded');
		int zl = clamp(ZoomInter?ZoomInter.GetValue():int(zoomlevel*10),0,160);
		if ( zl >= 10 )
		{
			Screen.DrawTexture(WeaponBox[1],false,bx-56,by-34,DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true);
			Screen.DrawText(TewiFont,Font.CR_WHITE,bx-54,by-34,String.Format("%2dx",zl/10),DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true);
			int zw = int(zl*31./160.);
			Screen.DrawTexture(ZoomBar,false,bx-33,by-32,DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true,DTA_WindowRight,zw);
		}
		Screen.DrawTexture(WeaponBox[0],false,bx-56,by-22,DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true);
		if ( chambered && !fired ) Screen.DrawText(TewiFont,Font.CR_FIRE,bx-19,by-21,"⁺¹",DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true,DTA_Spacing,-1);
		Screen.DrawText(TewiFont,Font.CR_FIRE,bx-16,by-14,String.Format("%d",max(clipcount,0)),DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true);
		int cx = (Ammo1.Amount>9)?53:50;
		Screen.DrawText(TewiFont,Font.CR_FIRE,bx-cx,by-18,String.Format("%d",Ammo1.Amount),DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true);
	}
	override void HudTick()
	{
		if ( !ZoomInter ) ZoomInter = DynamicValueInterpolator.Create(int(zoomlevel*10),.5,1,20);
		ZoomInter.Update(int(zoomlevel*10));
	}

	override bool ReportHUDAmmo()
	{
		if ( (chambered && !fired) || (clipcount > 0) ) return true;
		if ( Ammo1.Amount <= 0 ) return false;
		return Super.ReportHUDAmmo();
	}
	override bool CheckAmmo( int firemode, bool autoswitch, bool requireammo, int ammocount )
	{
		if ( sv_infiniteammo || Owner.FindInventory('PowerInfiniteAmmo',true) ) return true;
		if ( (fireMode == PrimaryFire) || (fireMode == AltFire) )
		{
			// allow player to still use the zoom even if there's no ammo left
			// (should work fine, assuming I've correctly interpreted the execution chain of all this stuff)
			if ( autoswitch && (fireMode == AltFire) ) return true;
			return ((chambered && !fired) || (clipcount > 0) || (Ammo1.Amount > 0));
		}
		return Super.CheckAmmo(firemode,autoswitch,requireammo,ammocount);
	}
	override void AttachToOwner( Actor other )
	{
		Super.AttachToOwner(other);
		if ( !initialized )
		{
			initialized = true;
			// first copy always has a bullet in the chamber
			chambered = true;
			fired = false;
		}
	}
	override void DetachFromOwner()
	{
		// force disable zoom
		zoomed = false;
		if ( Owner.player == players[consoleplayer] )
			Shader.SetEnabled(players[consoleplayer],"SilverScope",false);
		Super.DetachFromOwner();
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if ( zoomed ) crosshair = 99;
		else crosshair = 0;
	}
	override void RenderUnderlay( RenderEvent e )
	{
		if ( zoomed && (Owner.player == players[consoleplayer]) )
		{
			Vector2 ss = (Screen.GetWidth(),Screen.GetHeight());
			ss *= (512./ss.y);
			Shader.SetEnabled(players[consoleplayer],"SilverScope",true);
			if ( !reticle ) reticle = TexMan.CheckForTexture("graphics/SBReticle.png",TexMan.Type_Any);
			Screen.DrawTexture(reticle,false,ss.x*.5,ss.y*.5,DTA_VirtualWidthF,ss.x,DTA_VirtualHeightF,ss.y,DTA_KeepRatio,true,DTA_LegacyRenderStyle,STYLE_Stencil,DTA_FillColor,Color(0,0,0));
		}
		else Shader.SetEnabled(players[consoleplayer],"SilverScope",false);
	}

	action void ProcessTraceHit( SilverBulletTracer t, Vector3 origin, Vector3 dir )
	{
		for ( int i=0; i<t.ShootThroughList.Size(); i++ )
		{
			t.ShootThroughList[i].Activate(self,0,SPAC_PCross);
			if ( t.ShootThroughList[i].special == GlassBreak )	// fuck glass
				t.ShootThroughList[i].Activate(target,0,SPAC_Impact);
		}
		for ( int i=0; i<t.WaterHitList.Size(); i++ )
		{
			let b = Spawn("InvisibleSplasher",t.WaterHitList[i].hitpos);
			b.A_CheckTerrain();
		}
		for ( int i=4; i<t.Results.Distance; i+=8 )
		{
			if ( !Random[Boolet](0,1) ) continue;
			Vector3 ofs = level.Vec3Offset(origin,dir*i);
			if ( !level.IsPointInLevel(ofs) ) continue;
			let b = Spawn("SWWMHalfSmoke",ofs);
			b.Scale *= FRandom[Boolet](.9,1.6);
			b.alpha *= .5;
			b.special1 = Random[Boolet](0,2);
		}
		for ( int i=0; i<t.HitList.Size(); i++ )
		{
			int realdmg = t.HitList[i].HitDamage;
			SWWMDamageAccumulator.Accumulate(t.HitList[i].HitActor,realdmg,invoker,self,'shot',false,DMG_FOILINVUL);
			SWWMHandler.DoKnockback(t.HitList[i].HitActor,t.HitList[i].x+(0,0,0.025),realdmg*20.*FRandom[SilverBullet](.8,1.2));
			if ( t.HitList[i].HitActor.bNOBLOOD )
			{
				let p = Spawn("SilverImpact",t.HitList[i].HitLocation);
				p.angle = atan2(t.HitList[i].x.y,t.HitList[i].x.x)+180;
				p.pitch = asin(t.HitList[i].x.z);
				p.target = self;
			}
			else
			{
				t.HitList[i].HitActor.TraceBleed(realdmg,self);
				t.HitList[i].HitActor.SpawnBlood(t.HitList[i].HitLocation,atan2(t.HitList[i].x.y,t.HitList[i].x.x)+180,realdmg);
				t.HitList[i].HitActor.A_StartSound("silverbullet/flesh",CHAN_DAMAGE,CHANF_OVERLAP,1.,2.);
				let p = Spawn("SilverImpact",t.HitList[i].HitLocation);
				p.special1 = 1;
				p.target = self;
			}
		}
		for ( int i=0; i<t.WallPenetrateList.Size(); i++ )
		{
			Vector3 hitpos = t.WallPenetrateList[i].hitpos;
			Vector3 hitnormal = t.WallPenetrateList[i].hitnormal;
			let p = Spawn("SilverImpact",hitpos+hitnormal*4);
			p.angle = atan2(hitnormal.y,hitnormal.x);
			p.pitch = asin(-hitnormal.z);
			p.target = self;
		}
		if ( (t.Results.HitType != TRACE_HitNone) && (t.Results.HitType != TRACE_HasHitSky) && (t.Results.HitType != TRACE_HitActor) )
		{
			Vector3 hitnormal = -t.Results.HitVector;
			if ( t.Results.HitType == TRACE_HitFloor )
			{
				if ( t.Results.FFloor ) hitnormal = -t.Results.FFloor.top.Normal;
				else hitnormal = t.Results.HitSector.floorplane.Normal;
			}
			else if ( t.Results.HitType == TRACE_HitCeiling )
			{
				if ( t.Results.FFloor ) hitnormal = -t.Results.FFloor.bottom.Normal;
				else hitnormal = t.Results.HitSector.ceilingplane.Normal;
			}
			else if ( t.Results.HitType == TRACE_HitWall )
			{
				hitnormal = (-t.Results.HitLine.delta.y,t.Results.HitLine.delta.x,0).unit();
				if ( !t.Results.Side ) hitnormal *= -1;
			}
			let p = Spawn("SilverImpact",t.Results.HitPos+hitnormal*4);
			p.angle = atan2(hitnormal.y,hitnormal.x);
			p.pitch = asin(-hitnormal.z);
			p.target = self;
			if ( t.Results.HitLine ) t.Results.HitLine.RemoteActivate(self,t.Results.Side,SPAC_Impact,t.Results.HitPos);
		}
		for ( int i=0; i<t.Results.Distance; i+=16 )
		{
			Vector3 ofs = level.Vec3Offset(origin,dir*i);
			if ( !level.IsPointInLevel(ofs) ) continue;
			let s = Spawn("SilverAirRip",ofs);
			s.target = self;
		}
	}
	action void A_SilverFire()
	{
		A_SWWMFlash();
		A_StartSound("silverbullet/fire",CHAN_WEAPON,CHANF_OVERLAP,attenuation:.3);
		A_AlertMonsters(16000);
		A_QuakeEx(8,8,8,10,0,1,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:2.);
		double basezoom = invoker.zoomed?clamp(invoker.zoomlevel,1.,16.):1.;
		A_ZoomFactor(basezoom*.76,ZOOM_INSTANT);
		A_ZoomFactor(basezoom);
		A_PlayerFire();
		SWWMHandler.DoFlash(self,Color(110,255,192,80),8);
		A_Overlay(-9999,"Jet");
		Vector3 x, y, z;
		[x, y, z] = swwm_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = level.Vec3Offset(Vec2OffsetZ(0,0,player.viewz),10*x+1*y-1*z);
		Vector3 x2, y2, z2;
		[x2, y2, z2] = swwm_CoordUtil.GetAxes(BulletSlope(),angle,roll);
		SilverBulletTracer sst = new("SilverBulletTracer");
		sst.ignoreme = self;
		sst.penetration = 2500.;
		sst.hitlist.Clear();
		sst.shootthroughlist.Clear();
		sst.waterhitlist.Clear();
		sst.wallpenetratelist.Clear();
		sst.Trace(origin,level.PointInSector(origin.xy),x2,20000.,TRACE_HitSky);
		ProcessTraceHit(sst,origin,x2);
		for ( int i=0; i<10; i++ )
		{
			let s = Spawn("SWWMViewSmoke",origin);
			SWWMViewSmoke(s).ofs = (10,1,-1);
			s.target = self;
			s.SetShade(Color(1,1,1)*Random[Silverbullet](96,192));
			s.alpha *= .5;
		}
		for ( int i=0; i<16; i++ )
		{
			let s = Spawn("SWWMSmoke",origin);
			s.scale *= 1.3;
			s.alpha *= .5;
			s.special1 = Random[Silverbullet](0,3);
			s.SetShade(Color(1,1,1)*Random[Silverbullet](96,192));
			s.vel += vel*.5+x*FRandom[Silverbullet](2.,7.)+y*FRandom[Silverbullet](-2.,2.)+z*FRandom[Silverbullet](-2.,2.);
		}
		for ( int i=0; i<34; i++ )
		{
			let s = Spawn("SWWMSmoke",origin);
			s.scale *= 1.8;
			s.alpha *= .8;
			s.special1 = Random[Silverbullet](0,2);
			s.SetShade(Color(1,1,1)*Random[Silverbullet](96,192));
			s.vel += vel*.5+y*FRandom[Silverbullet](2.,8.)*RandomPick[SilverBullet](-1,1);
		}
		for ( int i=0; i<20; i++ )
		{
			let s = Spawn("SWWMSpark",origin);
			s.scale *= .4;
			s.alpha *= .4;
			s.vel += vel*.5+x*FRandom[Silverbullet](4.,8.)+y*FRandom[Silverbullet](-1,1)+z*FRandom[Silverbullet](-1,1);
		}
		bool reduceme = (player.mo.CanCrouch()&&(player.crouchfactor != 1));
		SWWMHandler.DoKnockback(self,-x,reduceme?32000.:320000.);
	}
	action void A_DropCasing()
	{
		Vector3 x, y, z;
		[x, y, z] = swwm_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = level.Vec3Offset(Vec2OffsetZ(0,0,player.viewz),10*x+10*y-8*z);
		let c = Spawn("SilverBulletCasing",origin);
		c.angle = angle;
		c.pitch = pitch;
		c.vel = x*FRandom[Junk](-.5,.5)+y*FRandom[Junk](4,8)-(0,0,FRandom[Junk](1,3));
		c.vel += vel*.5;
	}
	action void A_DropMag()
	{
		Vector3 x, y, z;
		[x, y, z] = swwm_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = level.Vec3Offset(Vec2OffsetZ(0,0,player.viewz),6*x-15*z);
		let c = Spawn((invoker.clipcount>0)?"SilverBulletMag":"SilverBulletMagEmpty",origin);
		c.angle = angle;
		c.pitch = pitch;
		c.vel = x*FRandom[Junk](-.5,.5)+y*FRandom[Junk](-.5,.5)-(0,0,FRandom[Junk](2,3));
		c.vel += vel*.5;
	}
	action void A_JetCompensate()
	{
		invoker.specialf1 -= .06;
		Vector3 x, y, z;
		[x, y, z] = swwm_CoordUtil.GetAxes(pitch,angle,roll);
		bool reduceme = (player.mo.CanCrouch()&&(player.crouchfactor != 1));
		vel += x*min(1.,invoker.specialf1)*((reduceme?60.:600.)/Mass);
		A_OverlayAlpha(PSP_WEAPON+2,clamp(invoker.specialf1*3.,0.,1.));
		if ( Random[SilverBullet](0,int(invoker.specialf1*2)) )
			self.DamageMobj(invoker,self,1,'jet');
		Vector3 origin = level.Vec3Offset(Vec2OffsetZ(0,0,player.viewz),-x*10-z*10);
		for ( int i=0; i<4; i++ )
		{
			let s = Spawn("SWWMSmoke",origin);
			s.scale *= 1.3;
			s.alpha *= .5*invoker.specialf1;
			s.special1 = Random[Silverbullet](0,3);
			s.SetShade(Color(1,1,1)*Random[Silverbullet](224,255));
			s.vel += vel*.5+x*FRandom[Silverbullet](-8.,-5.)+y*FRandom[Silverbullet](3.,6.)*RandomPick[Silverbullet](-1,1)+z*FRandom[Silverbullet](-3.,-2.);
		}
	}

	Default
	{
		Tag "$T_SILVERBULLET";
		Inventory.PickupMessage "$T_SILVERBULLET";
		Obituary "$O_SILVERBULLET";
		Inventory.Icon "graphics/HUD/Icons/W_SilverBullet.png";
		Weapon.SlotNumber 8;
		Weapon.SelectionOrder 800;
		Weapon.UpSound "silverbullet/select";
		Stamina 400000;
		Weapon.AmmoType1 "SilverBulletAmmo";
		Weapon.AmmoGive1 1;
		SilverBullet.ClipCount 5;
		+SWWMWEAPON.NOFIRSTGIVE;
		+WEAPON.NO_AUTO_SWITCH;
		+WEAPON.ALT_AMMO_OPTIONAL;
	}
	States
	{
	Spawn:
		XZW1 A -1;
		Stop;
	Select:
		XZW2 G 2 A_FullRaise();
		XZW2 HIJKLMN 2;
		Goto Ready;
	Ready:
		XZW2 A 1
		{
			int flg = WRF_ALLOWZOOM|WRF_ALLOWUSER1;
			if ( (invoker.clipcount < invoker.default.clipcount) && (sv_infiniteammo || FindInventory('PowerInfiniteAmmo',true) || (invoker.Ammo1.Amount > 0)) )
				flg |= WRF_ALLOWRELOAD;
			A_WeaponReady(flg);
			if ( player.cmd.buttons&BT_ATTACK )
				invoker.CheckAmmo(EitherFire,true);
		}
		Wait;
	ZoomReady:
		TNT1 A 1
		{
			int flg = WRF_ALLOWZOOM|WRF_ALLOWUSER1;
			if ( (invoker.clipcount < invoker.default.clipcount) && (sv_infiniteammo || FindInventory('PowerInfiniteAmmo',true) || (invoker.Ammo1.Amount > 0)) )
				flg |= WRF_ALLOWRELOAD;
			if ( invoker.rezoom > 0 )
			{
				flg |= WRF_NOSECONDARY;
				invoker.rezoom--;
			}
			A_WeaponReady(flg);
			if ( player.cmd.buttons&BT_ATTACK )
				invoker.CheckAmmo(EitherFire,true);
		}
		Wait;
	Fire:
		XZW2 A 1
		{
			if ( !invoker.chambered || invoker.fired )
			{
				if ( !invoker.fired && (invoker.clipcount <= 0) && (sv_infiniteammo || FindInventory('PowerInfiniteAmmo',true) || (invoker.Ammo1.Amount > 0)) )
					return ResolveState("Reload");
				return ResolveState("Cock");
			}
			A_SilverFire();
			invoker.fired = true;
			return A_JumpIf(invoker.zoomed,"ZoomFire");
		}
		XZW2 OPQR 2;
		XZW2 STUVW 3;
		XZW2 A 1 A_JumpIf(invoker.specialf1<=0.,"Ready");
		Wait;
	Jet:
		TNT1 A 3
		{
			invoker.specialf1 = 1.5;
		}
		TNT1 A 0
		{
			A_StartSound("silverbullet/jet",CHAN_WEAPON,CHANF_OVERLAP);
			A_Overlay(PSP_WEAPON+2,"JetSmoke");
			A_OverlayFlags(PSP_WEAPON+2,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCESTYLE|PSPF_FORCEALPHA,true);
			A_OverlayRenderStyle(PSP_WEAPON+2,STYLE_Add);
		}
		TNT1 A 1
		{
			A_JetCompensate();
			return A_JumpIf(invoker.specialf1<=0.,1);
		}
		Wait;
		TNT1 A 1;
		Stop;
	JetSmoke:
		XZW7 PQR 2;
		XZW7 STUVW 3;
		XZW7 X 1 A_JumpIf(invoker.specialf1<=0.,1);
		Wait;
		TNT1 A 1;
		Stop;
	Cock:
		XZW2 A 0
		{
			if ( invoker.zoomed )
			{
				invoker.dezoomstate = ResolveState("DoCock");
				return ResolveState("AltFireZoom");
			}
			return ResolveState(null);
		}
	DoCock:
		XZW2 A 2 A_StartSound("silverbullet/meleestart",CHAN_WEAPON,CHANF_OVERLAP);
		XZW2 XYZ 2;
		XZW3 AB 2;
		XZW3 C 2
		{
			A_StartSound("silverbullet/boltopen",CHAN_WEAPON,CHANF_OVERLAP);
			invoker.fired = false;
			if ( invoker.chambered )
				A_Overlay(PSP_WEAPON+1,"Casing");
			invoker.chambered = (invoker.clipcount>0);
			invoker.clipcount = max(0,invoker.clipcount-1);
		}
		XZW3 DEFG 2;
		XZW3 H 2 A_StartSound("silverbullet/boltclose",CHAN_WEAPON,CHANF_OVERLAP);
		XZW3 I 2 A_StartSound("silverbullet/meleeend",CHAN_WEAPON,CHANF_OVERLAP);
		XZW3 JKLMNOPQR 2;
		Goto Ready;
	Casing:
		XZW7 DE 2;
		XZW7 FGHIJKLMNO 1;
		TNT1 A 0 A_DropCasing();
		Stop;
	ZoomFire:
		TNT1 A 24;
		TNT1 A 1 A_JumpIf(invoker.specialf1<=0.,"ZoomReady");
		Wait;
	AltFire:
		XZW2 A 0 A_JumpIf(invoker.zoomed,"AltFireZoom");
		XZW2 A 2
		{
			A_StartSound("silverbullet/zoomstart",CHAN_WEAPON,CHANF_OVERLAP);
			invoker.zoomlevel = 0;
		}
		XZW3 STUVWX 1;
		TNT1 A 1
		{
			invoker.zoomed = true;
			invoker.zoomlevel = clamp(invoker.zoomlevel*1.05+.05,1.,16.);
			A_ZoomFactor(invoker.zoomlevel);
			if ( !(level.maptime%2) && (invoker.zoomlevel < 16.) ) A_StartSound("silverbullet/zooming",CHAN_WEAPON,CHANF_OVERLAP,.2);
			if ( !(player.cmd.buttons&BT_ALTATTACK) )
			{
				invoker.rezoom = 3;
				return ResolveState("ZoomReady");
			}
			return ResolveState(null);
		}
		Wait;
	AltFireZoom:
		XZW3 X 1
		{
			A_StartSound("silverbullet/zoomend",CHAN_WEAPON,CHANF_OVERLAP);
			invoker.zoomed = false;
			invoker.zoomlevel = 0;
			A_ZoomFactor(1.,ZOOM_INSTANT);
		}
		XZW3 YZ 1;
		XZW4 ABC 1;
		XZW2 A 0
		{
			if ( invoker.dezoomstate )
			{
				State tmp = invoker.dezoomstate;
				invoker.dezoomstate = null;
				return tmp;
			}
			return ResolveState(null);
		}
		Goto Ready;
	Reload:
		XZW2 A 0
		{
			if ( invoker.zoomed )
			{
				invoker.dezoomstate = ResolveState("Unload");
				return ResolveState("AltFireZoom");
			}
			return ResolveState(null);
		}
	Unload:
		XZW2 A 2
		{
			A_PlayerReload();
			A_StartSound("silverbullet/meleestart",CHAN_WEAPON,CHANF_OVERLAP);
			return A_JumpIf(invoker.clipcount<=0,"UnloadEmpty");
		}
		XZW4 DEFGHI 2;
		XZW4 J 2 A_StartSound("silverbullet/magout",CHAN_WEAPON,CHANF_OVERLAP);
		XZW4 KLMN 2;
		Goto Load;
	UnloadEmpty:
		XZW2 A 2;
		XZW4 OPQRST 2;
		XZW4 U 2 A_StartSound("silverbullet/magout",CHAN_WEAPON,CHANF_OVERLAP);
		XZW4 VWXY 2;
		Goto Load;
	Load:
		XZW4 Z 2
		{
			A_DropMag();
			invoker.clipcount = invoker.default.clipcount;
			if ( !sv_infiniteammo && !FindInventory('PowerInfiniteAmmo',true) )
				invoker.Ammo1.Amount = max(0,invoker.Ammo1.Amount-1);
		}
		XZW5 ABC 2;
		XZW5 D 2 A_StartSound("silverbullet/magin",CHAN_WEAPON,CHANF_OVERLAP);
		XZW5 E 2 A_StartSound("silverbullet/meleeend",CHAN_WEAPON,CHANF_OVERLAP);
		XZW5 FGHIJKLMN 2;
		Goto Ready;
	Zoom:
		XZW2 A 0
		{
			if ( invoker.zoomed )
			{
				invoker.dezoomstate = ResolveState("DoZoom");
				return ResolveState("AltFireZoom");
			}
			return ResolveState(null);
		}
	DoZoom:
		XZW2 A 2
		{
			A_StartSound("silverbullet/idle",CHAN_WEAPON,CHANF_OVERLAP);
			A_PlayerCheckGun();
		}
		XZW5 OPQR 3;
		XZW5 STUV 2;
		XZW5 WXYZ 3;
		XZW6 ABCD 4;
		XZW6 EFGH 3;
		Goto Ready;
	User1:
		XZW2 A 0
		{
			if ( invoker.zoomed )
			{
				invoker.dezoomstate = ResolveState("DoUser1");
				return ResolveState("AltFireZoom");
			}
			return ResolveState(null);
		}
	DoUser1:
		XZW2 A 2
		{
			A_StartSound("silverbullet/meleestart",CHAN_WEAPON,CHANF_OVERLAP);
			A_StartSound("demolitionist/wswing",CHAN_WEAPON,CHANF_OVERLAP);
			A_PlayerMelee();
		}
		XZW6 IJK 3;
		XZW6 L 1 A_Parry(9);
		XZW6 MN 1;
		XZW6 O 1 A_Melee(90,"demolitionist/whitl",1.6);
		XZW6 PQ 1;
		XZW6 RST 2;
		XZW6 U 3 A_StartSound("silverbullet/meleeend",CHAN_WEAPON,CHANF_OVERLAP);
		XZW6 VWXYZ 3;
		XZW7 ABC 2;
		Goto Ready;
	Deselect:
		XZW2 A 0
		{
			if ( invoker.zoomed )
			{
				invoker.dezoomstate = ResolveState("DoDeselect");
				return ResolveState("AltFireZoom");
			}
			return ResolveState(null);
		}
	DoDeselect:
		XZW2 A 2 A_StartSound("silverbullet/deselect",CHAN_WEAPON,CHANF_OVERLAP);
		XZW2 BCDEF 2;
		XZW2 G -1 A_FullLower();
		Stop;
	Flash:
		XZWZ A 2 Bright
		{
			let l = Spawn("SWWMWeaponLight",pos);
			l.args[3] = 200;
			l.target = self;
		}
		Stop;
	}
}
